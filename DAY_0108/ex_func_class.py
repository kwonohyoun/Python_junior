# -----------------------------------------------------------------------------------------
# 함수와 클래스
# -----------------------------------------------------------------------------------------
# 변수에 어떤 데이터를 저장하고 있는지 확인하는 함수 => type(변수명)
data = 1
print(f'data type => {type(data)}')

data = 'Good'
print(f'data type => {type(data)}')

# 함수명의 타입
print(f'id() type => {type(id)}')

# 사용자 정의 함수 생성 ----------------------------------------------------------------------
# 함수 기능: 2개 정수 더한 후 결과 출력 기능
# 함수 이름: addTwo
# 매개 변수: n1, n2
# 함수 결과: 없음
# -----------------------------------------------------------------------------------------
def addTwo(n1, n2):
    print(n1 + n2)

# 함수의 타입 출력 => type() 내장함수 사용 => class 'function' 타입을 가짐
print(type(addTwo))

# ------------------------------------------------------------------------------------------
# 함수와 변수
# - 함수명은 코드의 시작주소를 저장하고 있음
# - 함수명을 변수에 대입 가능
# ------------------------------------------------------------------------------------------
test = addTwo # 함수를 변수에 저장하면, 그 변수를 함수처럼 자유롭게 사용 가능(test = addTwo() 라고 하면 안됨. 괄호는 함수 호출임)
print(f'test => {id(test)}, {type(test)}')
print(f'addTwo => {id(addTwo)}')

test(10, 20)
addTwo(10, 20) # 결국 같은 함수를 저장하고 있기 때문에 두 함수의 결과가 같음.

# ------------------------------------------------------------------------------------------
# [활용예시]
# - 1~10 범위에서 임의의 정수 5개를 저장
# - 중복된 정수 저장 가능
# ------------------------------------------------------------------------------------------
import random # 임의의 수 쓸려면 꼭 해줘야 함

nums = []
for count in range(5):
    nums.append( random.randint(1,10) ) # 1~10까지 랜덤으로 정수 저장 함수

# 5개의 정수에서 최대값, 최소값, 내림차순 정렬된 값(sort, sorted), 합계(sum), 갯수(len) 출력하기
print(f'최대값: {max(nums)}')
print(f'최소값: {min(nums)}')
print(f'정 렬: {sorted(nums, reverse = True)}')
print(f'합 계: {sum(nums)}')
print(f'갯 수: {len(nums)}')

# 여러 개의 함수이름을 변수에 저장 => 리스트 사용
funs = [max, min, sorted, sum, len]
for f in funs: # funs의 함수가 f에 하나씩 들어가서 반복되므로, f가 함수가 됨. 따라서 f(nums)를 하면 함수를 사용하는 것이 됨.
    if f == sorted:
        print(f(nums, reverse=True))
    else:
        print(f(nums))

funDict = {'최대값':max, '최소값':min, '정렬':sorted, '합계':sum, '갯수':len}
for k, v in funDict.items(): # 키와 값이 튜플로 묶여서 나옴, 따라서 언패킹하여 저장
    if k == '정렬':
        print(f'{k}: {v(nums, reverse=True)}') # 언패킹에 의해 v에 함수가 저장되므로, v를 함수처럼 사용 가능
    else:
        print(f'{k}: {v(nums)}')