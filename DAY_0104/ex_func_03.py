# ----------------------------------------------------------------------------------------------
# 다양한 함수의 형태 - (2) 반환값 없는 함수
# ----------------------------------------------------------------------------------------------
# 함수 기능: 2개의 정수를 덧셈 후 출력해주는 기능
# 함수 이름: addTwo
# 매개 변수: x, y
# 반환값: 없음
# ----------------------------------------------------------------------------------------------
def addTwo(x, y):
    value = x + y
    print(f'{x} + {y} = {value}')


# 함수 사용, 즉 호출 =============================================================================
addTwo(10, 3)
# 함수 호출 시에 매개변수 갯수와 동일하게 데이터 전달해야 함!! >> 에러 발생
# Ex) addTwo( 1, 2, 3)

# ----------------------------------------------------------------------------------------------
# 함수 기능: 영어 단어를 입력받아서 모두 대문자로 변환해주는 기능
# 함수 이름: convertCase
# 매개 변수: word
# 반환값: 없음
# ----------------------------------------------------------------------------------------------
def convertCase(word):
    return word.upper()

print(word)

# ----------------------------------------------------------------------------------------------
# 함수 기능: 시퀀스 객체의 모든 원소를 대문자로 변환해주는 기능
# 함수 이름: convertCase2
# 매개 변수: word
# 반환값: 없음
# ----------------------------------------------------------------------------------------------
def convertCase2(dataList):
    for count in range(len(dataList)):
        dataList[count] = dataList[count].upper()
# 정답
def converCase22(dataList):
    for idx in range(len(dataList)):
        dataList[idx] = dataList[idx].upper()

    #for idx, data in enumerate(dataList):
    #    dataList[idx] = data.upper()

# 함수 사용, 즉 함수 호출 =======================================
datas = ['Apple', 'Banana', 'Mango']
print(f'[Before] => {datas}')
for idx in range(len(datas)):
    datas[idx] = datas[idx].upper() # 바뀐 복사본을 원본에 저장해줘야 함.

for idx, data in enumerate(datas):
    datas[idx] = data.upper()

# 값이 변경된 후
print(f'[After] => {datas}')